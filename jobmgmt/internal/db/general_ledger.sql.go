// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: general_ledger.sql

package db

import (
	"context"
)

const createGLAccount = `-- name: CreateGLAccount :one

INSERT INTO general_ledger_account (account_code, account_name, account_type)
VALUES ($1, $2, $3)
RETURNING gl_account_id, account_code, account_name, account_type
`

type CreateGLAccountParams struct {
	AccountCode string `json:"account_code"`
	AccountName string `json:"account_name"`
	AccountType string `json:"account_type"`
}

// =====================================================
// GENERAL LEDGER ACCOUNT QUERIES
// =====================================================
func (q *Queries) CreateGLAccount(ctx context.Context, arg CreateGLAccountParams) (GeneralLedgerAccount, error) {
	row := q.db.QueryRowContext(ctx, createGLAccount, arg.AccountCode, arg.AccountName, arg.AccountType)
	var i GeneralLedgerAccount
	err := row.Scan(
		&i.GlAccountID,
		&i.AccountCode,
		&i.AccountName,
		&i.AccountType,
	)
	return i, err
}

const getGLAccountByCode = `-- name: GetGLAccountByCode :one
SELECT gl_account_id, account_code, account_name, account_type FROM general_ledger_account WHERE account_code = $1
`

func (q *Queries) GetGLAccountByCode(ctx context.Context, accountCode string) (GeneralLedgerAccount, error) {
	row := q.db.QueryRowContext(ctx, getGLAccountByCode, accountCode)
	var i GeneralLedgerAccount
	err := row.Scan(
		&i.GlAccountID,
		&i.AccountCode,
		&i.AccountName,
		&i.AccountType,
	)
	return i, err
}

const getGLAccountByID = `-- name: GetGLAccountByID :one
SELECT gl_account_id, account_code, account_name, account_type FROM general_ledger_account WHERE gl_account_id = $1
`

func (q *Queries) GetGLAccountByID(ctx context.Context, glAccountID int32) (GeneralLedgerAccount, error) {
	row := q.db.QueryRowContext(ctx, getGLAccountByID, glAccountID)
	var i GeneralLedgerAccount
	err := row.Scan(
		&i.GlAccountID,
		&i.AccountCode,
		&i.AccountName,
		&i.AccountType,
	)
	return i, err
}

const upsertGLAccount = `-- name: UpsertGLAccount :one
INSERT INTO general_ledger_account (account_code, account_name, account_type)
VALUES ($1, $2, $3)
ON CONFLICT (account_code) 
DO UPDATE SET account_name = EXCLUDED.account_name, account_type = EXCLUDED.account_type
RETURNING gl_account_id, account_code, account_name, account_type
`

type UpsertGLAccountParams struct {
	AccountCode string `json:"account_code"`
	AccountName string `json:"account_name"`
	AccountType string `json:"account_type"`
}

func (q *Queries) UpsertGLAccount(ctx context.Context, arg UpsertGLAccountParams) (GeneralLedgerAccount, error) {
	row := q.db.QueryRowContext(ctx, upsertGLAccount, arg.AccountCode, arg.AccountName, arg.AccountType)
	var i GeneralLedgerAccount
	err := row.Scan(
		&i.GlAccountID,
		&i.AccountCode,
		&i.AccountName,
		&i.AccountType,
	)
	return i, err
}
