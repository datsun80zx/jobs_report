// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: project.sql

package db

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (id, summary, created_at, updated_at)
VALUES (
    $1,
    $2,
    NOW(),
    NOW()
)
RETURNING id, summary, created_at, updated_at
`

type CreateProjectParams struct {
	ID      int32          `json:"id"`
	Summary sql.NullString `json:"summary"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.ID, arg.Summary)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Summary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, summary, created_at, updated_at FROM projects WHERE projects.id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Summary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
