// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tag.sql

package db

import (
	"context"
)

const assignCustomerTag = `-- name: AssignCustomerTag :exec
INSERT INTO customer_tag_assignment (customer_id, customer_tag_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AssignCustomerTagParams struct {
	CustomerID    int32 `json:"customer_id"`
	CustomerTagID int32 `json:"customer_tag_id"`
}

func (q *Queries) AssignCustomerTag(ctx context.Context, arg AssignCustomerTagParams) error {
	_, err := q.db.ExecContext(ctx, assignCustomerTag, arg.CustomerID, arg.CustomerTagID)
	return err
}

const assignJobTag = `-- name: AssignJobTag :exec
INSERT INTO job_tag_assignment (job_id, job_tag_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AssignJobTagParams struct {
	JobID    int32 `json:"job_id"`
	JobTagID int32 `json:"job_tag_id"`
}

func (q *Queries) AssignJobTag(ctx context.Context, arg AssignJobTagParams) error {
	_, err := q.db.ExecContext(ctx, assignJobTag, arg.JobID, arg.JobTagID)
	return err
}

const assignLocationTag = `-- name: AssignLocationTag :exec
INSERT INTO location_tag_assignment (location_id, location_tag_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AssignLocationTagParams struct {
	LocationID    int32 `json:"location_id"`
	LocationTagID int32 `json:"location_tag_id"`
}

func (q *Queries) AssignLocationTag(ctx context.Context, arg AssignLocationTagParams) error {
	_, err := q.db.ExecContext(ctx, assignLocationTag, arg.LocationID, arg.LocationTagID)
	return err
}

const createCustomerTag = `-- name: CreateCustomerTag :one
INSERT INTO customer_tag (tag_name)
VALUES ($1)
RETURNING customer_tag_id, tag_name
`

func (q *Queries) CreateCustomerTag(ctx context.Context, tagName string) (CustomerTag, error) {
	row := q.db.QueryRowContext(ctx, createCustomerTag, tagName)
	var i CustomerTag
	err := row.Scan(&i.CustomerTagID, &i.TagName)
	return i, err
}

const createJobTag = `-- name: CreateJobTag :one

INSERT INTO job_tag (tag_name)
VALUES ($1)
RETURNING job_tag_id, tag_name
`

// =====================================================
// TAG QUERIES
// =====================================================
func (q *Queries) CreateJobTag(ctx context.Context, tagName string) (JobTag, error) {
	row := q.db.QueryRowContext(ctx, createJobTag, tagName)
	var i JobTag
	err := row.Scan(&i.JobTagID, &i.TagName)
	return i, err
}

const createLocationTag = `-- name: CreateLocationTag :one
INSERT INTO location_tag (tag_name)
VALUES ($1)
RETURNING location_tag_id, tag_name
`

func (q *Queries) CreateLocationTag(ctx context.Context, tagName string) (LocationTag, error) {
	row := q.db.QueryRowContext(ctx, createLocationTag, tagName)
	var i LocationTag
	err := row.Scan(&i.LocationTagID, &i.TagName)
	return i, err
}

const getCustomerTagByName = `-- name: GetCustomerTagByName :one
SELECT customer_tag_id, tag_name FROM customer_tag WHERE tag_name = $1
`

func (q *Queries) GetCustomerTagByName(ctx context.Context, tagName string) (CustomerTag, error) {
	row := q.db.QueryRowContext(ctx, getCustomerTagByName, tagName)
	var i CustomerTag
	err := row.Scan(&i.CustomerTagID, &i.TagName)
	return i, err
}

const getCustomerTagsByCustomerID = `-- name: GetCustomerTagsByCustomerID :many
SELECT ct.customer_tag_id, ct.tag_name 
FROM customer_tag ct
JOIN customer_tag_assignment cta ON ct.customer_tag_id = cta.customer_tag_id
WHERE cta.customer_id = $1
`

func (q *Queries) GetCustomerTagsByCustomerID(ctx context.Context, customerID int32) ([]CustomerTag, error) {
	rows, err := q.db.QueryContext(ctx, getCustomerTagsByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomerTag
	for rows.Next() {
		var i CustomerTag
		if err := rows.Scan(&i.CustomerTagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobTagByName = `-- name: GetJobTagByName :one
SELECT job_tag_id, tag_name FROM job_tag WHERE tag_name = $1
`

func (q *Queries) GetJobTagByName(ctx context.Context, tagName string) (JobTag, error) {
	row := q.db.QueryRowContext(ctx, getJobTagByName, tagName)
	var i JobTag
	err := row.Scan(&i.JobTagID, &i.TagName)
	return i, err
}

const getJobTagsByJobID = `-- name: GetJobTagsByJobID :many
SELECT jt.job_tag_id, jt.tag_name 
FROM job_tag jt
JOIN job_tag_assignment jta ON jt.job_tag_id = jta.job_tag_id
WHERE jta.job_id = $1
`

func (q *Queries) GetJobTagsByJobID(ctx context.Context, jobID int32) ([]JobTag, error) {
	rows, err := q.db.QueryContext(ctx, getJobTagsByJobID, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobTag
	for rows.Next() {
		var i JobTag
		if err := rows.Scan(&i.JobTagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationTagByName = `-- name: GetLocationTagByName :one
SELECT location_tag_id, tag_name FROM location_tag WHERE tag_name = $1
`

func (q *Queries) GetLocationTagByName(ctx context.Context, tagName string) (LocationTag, error) {
	row := q.db.QueryRowContext(ctx, getLocationTagByName, tagName)
	var i LocationTag
	err := row.Scan(&i.LocationTagID, &i.TagName)
	return i, err
}

const getLocationTagsByLocationID = `-- name: GetLocationTagsByLocationID :many
SELECT lt.location_tag_id, lt.tag_name 
FROM location_tag lt
JOIN location_tag_assignment lta ON lt.location_tag_id = lta.location_tag_id
WHERE lta.location_id = $1
`

func (q *Queries) GetLocationTagsByLocationID(ctx context.Context, locationID int32) ([]LocationTag, error) {
	rows, err := q.db.QueryContext(ctx, getLocationTagsByLocationID, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LocationTag
	for rows.Next() {
		var i LocationTag
		if err := rows.Scan(&i.LocationTagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCustomerTag = `-- name: UpsertCustomerTag :one
INSERT INTO customer_tag (tag_name)
VALUES ($1)
ON CONFLICT (tag_name) DO NOTHING
RETURNING customer_tag_id, tag_name
`

func (q *Queries) UpsertCustomerTag(ctx context.Context, tagName string) (CustomerTag, error) {
	row := q.db.QueryRowContext(ctx, upsertCustomerTag, tagName)
	var i CustomerTag
	err := row.Scan(&i.CustomerTagID, &i.TagName)
	return i, err
}

const upsertJobTag = `-- name: UpsertJobTag :one
INSERT INTO job_tag (tag_name)
VALUES ($1)
ON CONFLICT (tag_name) DO NOTHING
RETURNING job_tag_id, tag_name
`

func (q *Queries) UpsertJobTag(ctx context.Context, tagName string) (JobTag, error) {
	row := q.db.QueryRowContext(ctx, upsertJobTag, tagName)
	var i JobTag
	err := row.Scan(&i.JobTagID, &i.TagName)
	return i, err
}

const upsertLocationTag = `-- name: UpsertLocationTag :one
INSERT INTO location_tag (tag_name)
VALUES ($1)
ON CONFLICT (tag_name) DO NOTHING
RETURNING location_tag_id, tag_name
`

func (q *Queries) UpsertLocationTag(ctx context.Context, tagName string) (LocationTag, error) {
	row := q.db.QueryRowContext(ctx, upsertLocationTag, tagName)
	var i LocationTag
	err := row.Scan(&i.LocationTagID, &i.TagName)
	return i, err
}
