// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: job_skills.sql

package db

import (
	"context"
	"database/sql"
)

const createJobSkills = `-- name: CreateJobSkills :one
INSERT INTO job_skills (id, name, description, business_unit_id, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW()
)
RETURNING id, name, description, business_unit_id, created_at, updated_at
`

type CreateJobSkillsParams struct {
	ID             int32          `json:"id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	BusinessUnitID sql.NullInt32  `json:"business_unit_id"`
}

func (q *Queries) CreateJobSkills(ctx context.Context, arg CreateJobSkillsParams) (JobSkill, error) {
	row := q.db.QueryRowContext(ctx, createJobSkills,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.BusinessUnitID,
	)
	var i JobSkill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.BusinessUnitID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOneJobSkills = `-- name: GetOneJobSkills :one
SELECT id, name, description, business_unit_id, created_at, updated_at FROM job_skills
WHERE job_skills.id = $1
`

func (q *Queries) GetOneJobSkills(ctx context.Context, id int32) (JobSkill, error) {
	row := q.db.QueryRowContext(ctx, getOneJobSkills, id)
	var i JobSkill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.BusinessUnitID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listJobSkilsByBusinessUnit = `-- name: ListJobSkilsByBusinessUnit :many
SELECT id, name, description, business_unit_id, created_at, updated_at FROM job_skills
WHERE 
    job_skills.business_unit_id = $1
ORDER BY job_skills.name
`

func (q *Queries) ListJobSkilsByBusinessUnit(ctx context.Context, businessUnitID sql.NullInt32) ([]JobSkill, error) {
	rows, err := q.db.QueryContext(ctx, listJobSkilsByBusinessUnit, businessUnitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobSkill
	for rows.Next() {
		var i JobSkill
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.BusinessUnitID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
