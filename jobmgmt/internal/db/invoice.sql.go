// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invoice.sql

package db

import (
	"context"
	"database/sql"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (id, customers_id, jobs_id, estimates_id, business_units_id, is_paid, created_at, updated_at)
VALUES (
    $1, 
    $2,
    $3,
    $4,
    $5, 
    $6,
    NOW(),
    NOW()
)
RETURNING id, customers_id, jobs_id, estimates_id, business_units_id, is_paid, created_at, updated_at
`

type CreateInvoiceParams struct {
	ID              int32         `json:"id"`
	CustomersID     int32         `json:"customers_id"`
	JobsID          sql.NullInt32 `json:"jobs_id"`
	EstimatesID     sql.NullInt32 `json:"estimates_id"`
	BusinessUnitsID sql.NullInt32 `json:"business_units_id"`
	IsPaid          sql.NullBool  `json:"is_paid"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice,
		arg.ID,
		arg.CustomersID,
		arg.JobsID,
		arg.EstimatesID,
		arg.BusinessUnitsID,
		arg.IsPaid,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomersID,
		&i.JobsID,
		&i.EstimatesID,
		&i.BusinessUnitsID,
		&i.IsPaid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT id, customers_id, jobs_id, estimates_id, business_units_id, is_paid, created_at, updated_at FROM invoices WHERE id = $1
`

func (q *Queries) GetInvoiceByID(ctx context.Context, id int32) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByID, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomersID,
		&i.JobsID,
		&i.EstimatesID,
		&i.BusinessUnitsID,
		&i.IsPaid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInvoiceByJobID = `-- name: GetInvoiceByJobID :one
SELECT id, customers_id, jobs_id, estimates_id, business_units_id, is_paid, created_at, updated_at FROM invoices WHERE jobs_id = $1
`

func (q *Queries) GetInvoiceByJobID(ctx context.Context, jobsID sql.NullInt32) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByJobID, jobsID)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomersID,
		&i.JobsID,
		&i.EstimatesID,
		&i.BusinessUnitsID,
		&i.IsPaid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertInvoice = `-- name: UpsertInvoice :one
INSERT INTO invoices (id, customers_id, jobs_id, estimates_id, business_units_id, is_paid, created_at, updated_at)
VALUES (
    $1, 
    $2,
    $3,
    $4,
    $5, 
    $6,
    NOW(),
    NOW()
)
ON CONFLICT (id) DO NOTHING
RETURNING id, customers_id, jobs_id, estimates_id, business_units_id, is_paid, created_at, updated_at
`

type UpsertInvoiceParams struct {
	ID              int32         `json:"id"`
	CustomersID     int32         `json:"customers_id"`
	JobsID          sql.NullInt32 `json:"jobs_id"`
	EstimatesID     sql.NullInt32 `json:"estimates_id"`
	BusinessUnitsID sql.NullInt32 `json:"business_units_id"`
	IsPaid          sql.NullBool  `json:"is_paid"`
}

func (q *Queries) UpsertInvoice(ctx context.Context, arg UpsertInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, upsertInvoice,
		arg.ID,
		arg.CustomersID,
		arg.JobsID,
		arg.EstimatesID,
		arg.BusinessUnitsID,
		arg.IsPaid,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomersID,
		&i.JobsID,
		&i.EstimatesID,
		&i.BusinessUnitsID,
		&i.IsPaid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
