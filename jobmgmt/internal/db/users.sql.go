// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one

INSERT INTO app_user (user_name, email)
VALUES ($1, $2)
RETURNING user_id, user_name, email, created_at
`

type CreateUserParams struct {
	UserName string         `json:"user_name"`
	Email    sql.NullString `json:"email"`
}

// =====================================================
// USER QUERIES
// =====================================================
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserName, arg.Email)
	var i AppUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, user_name, email, created_at FROM app_user WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i AppUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT user_id, user_name, email, created_at FROM app_user WHERE user_name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, userName string) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, userName)
	var i AppUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO app_user (user_name, email)
VALUES ($1, $2)
ON CONFLICT (user_name) 
DO UPDATE SET email = EXCLUDED.email
RETURNING user_id, user_name, email, created_at
`

type UpsertUserParams struct {
	UserName string         `json:"user_name"`
	Email    sql.NullString `json:"email"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, upsertUser, arg.UserName, arg.Email)
	var i AppUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
