// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: opportunities.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOpportunity = `-- name: CreateOpportunity :one
INSERT INTO opportunities (id, created_at, updated_at, business_units_id, job_types_id, technicians_id, jobs_id)
VALUES (
    $1, 
    NOW(),
    NOW(), 
    $2, 
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, business_units_id, job_types_id, technicians_id, jobs_id
`

type CreateOpportunityParams struct {
	ID              int32         `json:"id"`
	BusinessUnitsID sql.NullInt32 `json:"business_units_id"`
	JobTypesID      sql.NullInt32 `json:"job_types_id"`
	TechniciansID   uuid.NullUUID `json:"technicians_id"`
	JobsID          sql.NullInt32 `json:"jobs_id"`
}

func (q *Queries) CreateOpportunity(ctx context.Context, arg CreateOpportunityParams) (Opportunity, error) {
	row := q.db.QueryRowContext(ctx, createOpportunity,
		arg.ID,
		arg.BusinessUnitsID,
		arg.JobTypesID,
		arg.TechniciansID,
		arg.JobsID,
	)
	var i Opportunity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BusinessUnitsID,
		&i.JobTypesID,
		&i.TechniciansID,
		&i.JobsID,
	)
	return i, err
}

const getOneOpportunity = `-- name: GetOneOpportunity :one
SELECT id, created_at, updated_at, business_units_id, job_types_id, technicians_id, jobs_id FROM opportunities
WHERE id == $1
`

func (q *Queries) GetOneOpportunity(ctx context.Context, id int32) (Opportunity, error) {
	row := q.db.QueryRowContext(ctx, getOneOpportunity, id)
	var i Opportunity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BusinessUnitsID,
		&i.JobTypesID,
		&i.TechniciansID,
		&i.JobsID,
	)
	return i, err
}

const listOpportunitiesByBusinessUnit = `-- name: ListOpportunitiesByBusinessUnit :many
SELECT id, created_at, updated_at, business_units_id, job_types_id, technicians_id, jobs_id FROM opportunities 
WHERE business_units_id = $1
`

func (q *Queries) ListOpportunitiesByBusinessUnit(ctx context.Context, businessUnitsID sql.NullInt32) ([]Opportunity, error) {
	rows, err := q.db.QueryContext(ctx, listOpportunitiesByBusinessUnit, businessUnitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Opportunity
	for rows.Next() {
		var i Opportunity
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BusinessUnitsID,
			&i.JobTypesID,
			&i.TechniciansID,
			&i.JobsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOpportunitiesByJobTypes = `-- name: ListOpportunitiesByJobTypes :many
SELECT id, created_at, updated_at, business_units_id, job_types_id, technicians_id, jobs_id FROM opportunities 
WHERE job_types_id = $1
`

func (q *Queries) ListOpportunitiesByJobTypes(ctx context.Context, jobTypesID sql.NullInt32) ([]Opportunity, error) {
	rows, err := q.db.QueryContext(ctx, listOpportunitiesByJobTypes, jobTypesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Opportunity
	for rows.Next() {
		var i Opportunity
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BusinessUnitsID,
			&i.JobTypesID,
			&i.TechniciansID,
			&i.JobsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOpportunitiesByTech = `-- name: ListOpportunitiesByTech :many
SELECT id, created_at, updated_at, business_units_id, job_types_id, technicians_id, jobs_id FROM opportunities
WHERE technicians_id = $1
`

func (q *Queries) ListOpportunitiesByTech(ctx context.Context, techniciansID uuid.NullUUID) ([]Opportunity, error) {
	rows, err := q.db.QueryContext(ctx, listOpportunitiesByTech, techniciansID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Opportunity
	for rows.Next() {
		var i Opportunity
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BusinessUnitsID,
			&i.JobTypesID,
			&i.TechniciansID,
			&i.JobsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
