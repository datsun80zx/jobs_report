// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: location.sql

package db

import (
	"context"
	"database/sql"
)

const createLocation = `-- name: CreateLocation :one

INSERT INTO location (customer_id, city, state, zip_code, street_address)
VALUES ($1, $2, $3, $4, $5)
RETURNING location_id, customer_id, city, state, zip_code, street_address
`

type CreateLocationParams struct {
	CustomerID    int32          `json:"customer_id"`
	City          sql.NullString `json:"city"`
	State         sql.NullString `json:"state"`
	ZipCode       sql.NullString `json:"zip_code"`
	StreetAddress sql.NullString `json:"street_address"`
}

// =====================================================
// LOCATION QUERIES
// =====================================================
func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation,
		arg.CustomerID,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.StreetAddress,
	)
	var i Location
	err := row.Scan(
		&i.LocationID,
		&i.CustomerID,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.StreetAddress,
	)
	return i, err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT location_id, customer_id, city, state, zip_code, street_address FROM location WHERE location_id = $1
`

func (q *Queries) GetLocationByID(ctx context.Context, locationID int32) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByID, locationID)
	var i Location
	err := row.Scan(
		&i.LocationID,
		&i.CustomerID,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.StreetAddress,
	)
	return i, err
}

const getLocationsByCustomerID = `-- name: GetLocationsByCustomerID :many
SELECT location_id, customer_id, city, state, zip_code, street_address FROM location WHERE customer_id = $1
`

func (q *Queries) GetLocationsByCustomerID(ctx context.Context, customerID int32) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, getLocationsByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.LocationID,
			&i.CustomerID,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.StreetAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
