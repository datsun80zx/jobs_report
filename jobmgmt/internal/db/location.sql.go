// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: location.sql

package db

import (
	"context"
	"database/sql"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (id, name, city, state, zip, customer_id, created_at, updated_at)
VALUES (
    $1, 
    $2,
    $3,
    $4,
    $5,
    $6,
    NOW(),
    NOW()
)
RETURNING id, name, city, state, zip, customer_id, created_at, updated_at
`

type CreateLocationParams struct {
	ID         int32          `json:"id"`
	Name       string         `json:"name"`
	City       sql.NullString `json:"city"`
	State      sql.NullString `json:"state"`
	Zip        sql.NullString `json:"zip"`
	CustomerID int32          `json:"customer_id"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation,
		arg.ID,
		arg.Name,
		arg.City,
		arg.State,
		arg.Zip,
		arg.CustomerID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.State,
		&i.Zip,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, name, city, state, zip, customer_id, created_at, updated_at FROM locations WHERE locations.id = $1
`

func (q *Queries) GetLocationByID(ctx context.Context, id int32) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByID, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.State,
		&i.Zip,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocationsByCustomerID = `-- name: GetLocationsByCustomerID :many
SELECT id, name, city, state, zip, customer_id, created_at, updated_at FROM locations WHERE locations.customer_id = $1
`

func (q *Queries) GetLocationsByCustomerID(ctx context.Context, customerID int32) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, getLocationsByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.City,
			&i.State,
			&i.Zip,
			&i.CustomerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
