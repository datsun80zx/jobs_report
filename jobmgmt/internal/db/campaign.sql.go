// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: campaign.sql

package db

import (
	"context"
	"database/sql"
)

const createCampaignCategory = `-- name: CreateCampaignCategory :one
INSERT INTO campaign_categories (id, name, description, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3,
    NOW(),
    NOW()
)
RETURNING id, name, description, created_at, updated_at
`

type CreateCampaignCategoryParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateCampaignCategory(ctx context.Context, arg CreateCampaignCategoryParams) (CampaignCategory, error) {
	row := q.db.QueryRowContext(ctx, createCampaignCategory, arg.ID, arg.Name, arg.Description)
	var i CampaignCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCampaignCategoryByName = `-- name: GetCampaignCategoryByName :one
SELECT id, name, description, created_at, updated_at FROM campaign_categories WHERE id = $1
`

func (q *Queries) GetCampaignCategoryByName(ctx context.Context, id int32) (CampaignCategory, error) {
	row := q.db.QueryRowContext(ctx, getCampaignCategoryByName, id)
	var i CampaignCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertCampaignCategory = `-- name: UpsertCampaignCategory :one
INSERT INTO campaign_categories (id, name, description, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
ON CONFLICT (id) DO NOTHING
RETURNING id, name, description, created_at, updated_at
`

type UpsertCampaignCategoryParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpsertCampaignCategory(ctx context.Context, arg UpsertCampaignCategoryParams) (CampaignCategory, error) {
	row := q.db.QueryRowContext(ctx, upsertCampaignCategory, arg.ID, arg.Name, arg.Description)
	var i CampaignCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
