// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: job.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
    id, job_type_id, business_unit_id, customer_id, location_id, project_id, job_campaign_id, call_campaign_id, job_status, job_priority, job_summary, job_creation_date, 
    job_schedule_date, job_completion_date, assigned_tech_id, sold_tech_id, sold_bu_id, count_of_estimates, sold_estimate_id, campaign_category_id, invoice_id, opportunity_id,
    is_warranty, warranty_of_job_id, is_recall, recall_of_job_id, is_converted, survey_score, dispatched_by_user_id, booked_by_user_id, job_id_of_created_lead, is_zero_cost,
    scheduled_time, first_dispatch, hold_date, sold_date, start_time, end_time, primary_tech_id, first_response_time)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
    $11, $12, $13, $14, $15, $16, $17, $18,
    $19, $20, $21, $22, $23, $24, $25, $26, $27,
    $28, $29, $30, $31, $32, $33, $34, $35, $36, 
    $37, $38, $39, $40
)
RETURNING id, job_type_id, business_unit_id, customer_id, location_id, project_id, job_campaign_id, call_campaign_id, job_status, job_priority, job_summary, job_creation_date, job_schedule_date, job_completion_date, assigned_tech_id, sold_tech_id, sold_bu_id, count_of_estimates, sold_estimate_id, campaign_category_id, invoice_id, opportunity_id, is_warranty, warranty_of_job_id, is_recall, recall_of_job_id, is_converted, survey_score, dispatched_by_user_id, booked_by_user_id, job_id_of_created_lead, is_zero_cost, scheduled_time, first_dispatch, hold_date, sold_date, start_time, end_time, primary_tech_id, first_response_time
`

type CreateJobParams struct {
	ID                 int32          `json:"id"`
	JobTypeID          int32          `json:"job_type_id"`
	BusinessUnitID     int32          `json:"business_unit_id"`
	CustomerID         int32          `json:"customer_id"`
	LocationID         int32          `json:"location_id"`
	ProjectID          int32          `json:"project_id"`
	JobCampaignID      int32          `json:"job_campaign_id"`
	CallCampaignID     int32          `json:"call_campaign_id"`
	JobStatus          string         `json:"job_status"`
	JobPriority        string         `json:"job_priority"`
	JobSummary         sql.NullString `json:"job_summary"`
	JobCreationDate    time.Time      `json:"job_creation_date"`
	JobScheduleDate    sql.NullTime   `json:"job_schedule_date"`
	JobCompletionDate  sql.NullTime   `json:"job_completion_date"`
	AssignedTechID     uuid.NullUUID  `json:"assigned_tech_id"`
	SoldTechID         uuid.NullUUID  `json:"sold_tech_id"`
	SoldBuID           sql.NullInt32  `json:"sold_bu_id"`
	CountOfEstimates   sql.NullInt32  `json:"count_of_estimates"`
	SoldEstimateID     sql.NullInt32  `json:"sold_estimate_id"`
	CampaignCategoryID sql.NullInt32  `json:"campaign_category_id"`
	InvoiceID          sql.NullInt32  `json:"invoice_id"`
	OpportunityID      sql.NullInt32  `json:"opportunity_id"`
	IsWarranty         sql.NullBool   `json:"is_warranty"`
	WarrantyOfJobID    sql.NullInt32  `json:"warranty_of_job_id"`
	IsRecall           sql.NullBool   `json:"is_recall"`
	RecallOfJobID      sql.NullInt32  `json:"recall_of_job_id"`
	IsConverted        sql.NullBool   `json:"is_converted"`
	SurveyScore        sql.NullInt32  `json:"survey_score"`
	DispatchedByUserID uuid.NullUUID  `json:"dispatched_by_user_id"`
	BookedByUserID     uuid.NullUUID  `json:"booked_by_user_id"`
	JobIDOfCreatedLead sql.NullInt32  `json:"job_id_of_created_lead"`
	IsZeroCost         sql.NullBool   `json:"is_zero_cost"`
	ScheduledTime      sql.NullTime   `json:"scheduled_time"`
	FirstDispatch      sql.NullTime   `json:"first_dispatch"`
	HoldDate           sql.NullTime   `json:"hold_date"`
	SoldDate           sql.NullTime   `json:"sold_date"`
	StartTime          sql.NullTime   `json:"start_time"`
	EndTime            sql.NullTime   `json:"end_time"`
	PrimaryTechID      uuid.NullUUID  `json:"primary_tech_id"`
	FirstResponseTime  sql.NullInt32  `json:"first_response_time"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createJob,
		arg.ID,
		arg.JobTypeID,
		arg.BusinessUnitID,
		arg.CustomerID,
		arg.LocationID,
		arg.ProjectID,
		arg.JobCampaignID,
		arg.CallCampaignID,
		arg.JobStatus,
		arg.JobPriority,
		arg.JobSummary,
		arg.JobCreationDate,
		arg.JobScheduleDate,
		arg.JobCompletionDate,
		arg.AssignedTechID,
		arg.SoldTechID,
		arg.SoldBuID,
		arg.CountOfEstimates,
		arg.SoldEstimateID,
		arg.CampaignCategoryID,
		arg.InvoiceID,
		arg.OpportunityID,
		arg.IsWarranty,
		arg.WarrantyOfJobID,
		arg.IsRecall,
		arg.RecallOfJobID,
		arg.IsConverted,
		arg.SurveyScore,
		arg.DispatchedByUserID,
		arg.BookedByUserID,
		arg.JobIDOfCreatedLead,
		arg.IsZeroCost,
		arg.ScheduledTime,
		arg.FirstDispatch,
		arg.HoldDate,
		arg.SoldDate,
		arg.StartTime,
		arg.EndTime,
		arg.PrimaryTechID,
		arg.FirstResponseTime,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.JobTypeID,
		&i.BusinessUnitID,
		&i.CustomerID,
		&i.LocationID,
		&i.ProjectID,
		&i.JobCampaignID,
		&i.CallCampaignID,
		&i.JobStatus,
		&i.JobPriority,
		&i.JobSummary,
		&i.JobCreationDate,
		&i.JobScheduleDate,
		&i.JobCompletionDate,
		&i.AssignedTechID,
		&i.SoldTechID,
		&i.SoldBuID,
		&i.CountOfEstimates,
		&i.SoldEstimateID,
		&i.CampaignCategoryID,
		&i.InvoiceID,
		&i.OpportunityID,
		&i.IsWarranty,
		&i.WarrantyOfJobID,
		&i.IsRecall,
		&i.RecallOfJobID,
		&i.IsConverted,
		&i.SurveyScore,
		&i.DispatchedByUserID,
		&i.BookedByUserID,
		&i.JobIDOfCreatedLead,
		&i.IsZeroCost,
		&i.ScheduledTime,
		&i.FirstDispatch,
		&i.HoldDate,
		&i.SoldDate,
		&i.StartTime,
		&i.EndTime,
		&i.PrimaryTechID,
		&i.FirstResponseTime,
	)
	return i, err
}

const getJobByID = `-- name: GetJobByID :one
SELECT id, job_type_id, business_unit_id, customer_id, location_id, project_id, job_campaign_id, call_campaign_id, job_status, job_priority, job_summary, job_creation_date, job_schedule_date, job_completion_date, assigned_tech_id, sold_tech_id, sold_bu_id, count_of_estimates, sold_estimate_id, campaign_category_id, invoice_id, opportunity_id, is_warranty, warranty_of_job_id, is_recall, recall_of_job_id, is_converted, survey_score, dispatched_by_user_id, booked_by_user_id, job_id_of_created_lead, is_zero_cost, scheduled_time, first_dispatch, hold_date, sold_date, start_time, end_time, primary_tech_id, first_response_time FROM jobs WHERE id = $1
`

func (q *Queries) GetJobByID(ctx context.Context, id int32) (Job, error) {
	row := q.db.QueryRowContext(ctx, getJobByID, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.JobTypeID,
		&i.BusinessUnitID,
		&i.CustomerID,
		&i.LocationID,
		&i.ProjectID,
		&i.JobCampaignID,
		&i.CallCampaignID,
		&i.JobStatus,
		&i.JobPriority,
		&i.JobSummary,
		&i.JobCreationDate,
		&i.JobScheduleDate,
		&i.JobCompletionDate,
		&i.AssignedTechID,
		&i.SoldTechID,
		&i.SoldBuID,
		&i.CountOfEstimates,
		&i.SoldEstimateID,
		&i.CampaignCategoryID,
		&i.InvoiceID,
		&i.OpportunityID,
		&i.IsWarranty,
		&i.WarrantyOfJobID,
		&i.IsRecall,
		&i.RecallOfJobID,
		&i.IsConverted,
		&i.SurveyScore,
		&i.DispatchedByUserID,
		&i.BookedByUserID,
		&i.JobIDOfCreatedLead,
		&i.IsZeroCost,
		&i.ScheduledTime,
		&i.FirstDispatch,
		&i.HoldDate,
		&i.SoldDate,
		&i.StartTime,
		&i.EndTime,
		&i.PrimaryTechID,
		&i.FirstResponseTime,
	)
	return i, err
}

const listJobsByCustomerID = `-- name: ListJobsByCustomerID :many
SELECT id, job_type_id, business_unit_id, customer_id, location_id, project_id, job_campaign_id, call_campaign_id, job_status, job_priority, job_summary, job_creation_date, job_schedule_date, job_completion_date, assigned_tech_id, sold_tech_id, sold_bu_id, count_of_estimates, sold_estimate_id, campaign_category_id, invoice_id, opportunity_id, is_warranty, warranty_of_job_id, is_recall, recall_of_job_id, is_converted, survey_score, dispatched_by_user_id, booked_by_user_id, job_id_of_created_lead, is_zero_cost, scheduled_time, first_dispatch, hold_date, sold_date, start_time, end_time, primary_tech_id, first_response_time FROM jobs 
WHERE customer_id = $1
ORDER BY job_creation_date DESC
`

func (q *Queries) ListJobsByCustomerID(ctx context.Context, customerID int32) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, listJobsByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.JobTypeID,
			&i.BusinessUnitID,
			&i.CustomerID,
			&i.LocationID,
			&i.ProjectID,
			&i.JobCampaignID,
			&i.CallCampaignID,
			&i.JobStatus,
			&i.JobPriority,
			&i.JobSummary,
			&i.JobCreationDate,
			&i.JobScheduleDate,
			&i.JobCompletionDate,
			&i.AssignedTechID,
			&i.SoldTechID,
			&i.SoldBuID,
			&i.CountOfEstimates,
			&i.SoldEstimateID,
			&i.CampaignCategoryID,
			&i.InvoiceID,
			&i.OpportunityID,
			&i.IsWarranty,
			&i.WarrantyOfJobID,
			&i.IsRecall,
			&i.RecallOfJobID,
			&i.IsConverted,
			&i.SurveyScore,
			&i.DispatchedByUserID,
			&i.BookedByUserID,
			&i.JobIDOfCreatedLead,
			&i.IsZeroCost,
			&i.ScheduledTime,
			&i.FirstDispatch,
			&i.HoldDate,
			&i.SoldDate,
			&i.StartTime,
			&i.EndTime,
			&i.PrimaryTechID,
			&i.FirstResponseTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsByDateRange = `-- name: ListJobsByDateRange :many
SELECT id, job_type_id, business_unit_id, customer_id, location_id, project_id, job_campaign_id, call_campaign_id, job_status, job_priority, job_summary, job_creation_date, job_schedule_date, job_completion_date, assigned_tech_id, sold_tech_id, sold_bu_id, count_of_estimates, sold_estimate_id, campaign_category_id, invoice_id, opportunity_id, is_warranty, warranty_of_job_id, is_recall, recall_of_job_id, is_converted, survey_score, dispatched_by_user_id, booked_by_user_id, job_id_of_created_lead, is_zero_cost, scheduled_time, first_dispatch, hold_date, sold_date, start_time, end_time, primary_tech_id, first_response_time FROM jobs
WHERE job_creation_date BETWEEN $1 AND $2
ORDER BY job_creation_date DESC
LIMIT $3 OFFSET $4
`

type ListJobsByDateRangeParams struct {
	JobCreationDate   time.Time `json:"job_creation_date"`
	JobCreationDate_2 time.Time `json:"job_creation_date_2"`
	Limit             int32     `json:"limit"`
	Offset            int32     `json:"offset"`
}

func (q *Queries) ListJobsByDateRange(ctx context.Context, arg ListJobsByDateRangeParams) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, listJobsByDateRange,
		arg.JobCreationDate,
		arg.JobCreationDate_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.JobTypeID,
			&i.BusinessUnitID,
			&i.CustomerID,
			&i.LocationID,
			&i.ProjectID,
			&i.JobCampaignID,
			&i.CallCampaignID,
			&i.JobStatus,
			&i.JobPriority,
			&i.JobSummary,
			&i.JobCreationDate,
			&i.JobScheduleDate,
			&i.JobCompletionDate,
			&i.AssignedTechID,
			&i.SoldTechID,
			&i.SoldBuID,
			&i.CountOfEstimates,
			&i.SoldEstimateID,
			&i.CampaignCategoryID,
			&i.InvoiceID,
			&i.OpportunityID,
			&i.IsWarranty,
			&i.WarrantyOfJobID,
			&i.IsRecall,
			&i.RecallOfJobID,
			&i.IsConverted,
			&i.SurveyScore,
			&i.DispatchedByUserID,
			&i.BookedByUserID,
			&i.JobIDOfCreatedLead,
			&i.IsZeroCost,
			&i.ScheduledTime,
			&i.FirstDispatch,
			&i.HoldDate,
			&i.SoldDate,
			&i.StartTime,
			&i.EndTime,
			&i.PrimaryTechID,
			&i.FirstResponseTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsByStatus = `-- name: ListJobsByStatus :many
SELECT id, job_type_id, business_unit_id, customer_id, location_id, project_id, job_campaign_id, call_campaign_id, job_status, job_priority, job_summary, job_creation_date, job_schedule_date, job_completion_date, assigned_tech_id, sold_tech_id, sold_bu_id, count_of_estimates, sold_estimate_id, campaign_category_id, invoice_id, opportunity_id, is_warranty, warranty_of_job_id, is_recall, recall_of_job_id, is_converted, survey_score, dispatched_by_user_id, booked_by_user_id, job_id_of_created_lead, is_zero_cost, scheduled_time, first_dispatch, hold_date, sold_date, start_time, end_time, primary_tech_id, first_response_time FROM jobs 
WHERE job_status = $1
ORDER BY job_creation_date DESC
LIMIT $2 OFFSET $3
`

type ListJobsByStatusParams struct {
	JobStatus string `json:"job_status"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) ListJobsByStatus(ctx context.Context, arg ListJobsByStatusParams) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, listJobsByStatus, arg.JobStatus, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.JobTypeID,
			&i.BusinessUnitID,
			&i.CustomerID,
			&i.LocationID,
			&i.ProjectID,
			&i.JobCampaignID,
			&i.CallCampaignID,
			&i.JobStatus,
			&i.JobPriority,
			&i.JobSummary,
			&i.JobCreationDate,
			&i.JobScheduleDate,
			&i.JobCompletionDate,
			&i.AssignedTechID,
			&i.SoldTechID,
			&i.SoldBuID,
			&i.CountOfEstimates,
			&i.SoldEstimateID,
			&i.CampaignCategoryID,
			&i.InvoiceID,
			&i.OpportunityID,
			&i.IsWarranty,
			&i.WarrantyOfJobID,
			&i.IsRecall,
			&i.RecallOfJobID,
			&i.IsConverted,
			&i.SurveyScore,
			&i.DispatchedByUserID,
			&i.BookedByUserID,
			&i.JobIDOfCreatedLead,
			&i.IsZeroCost,
			&i.ScheduledTime,
			&i.FirstDispatch,
			&i.HoldDate,
			&i.SoldDate,
			&i.StartTime,
			&i.EndTime,
			&i.PrimaryTechID,
			&i.FirstResponseTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobStatus = `-- name: UpdateJobStatus :exec
UPDATE jobs
SET job_status = $2, job_completion_date = $3
WHERE id = $1
`

type UpdateJobStatusParams struct {
	ID                int32        `json:"id"`
	JobStatus         string       `json:"job_status"`
	JobCompletionDate sql.NullTime `json:"job_completion_date"`
}

func (q *Queries) UpdateJobStatus(ctx context.Context, arg UpdateJobStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateJobStatus, arg.ID, arg.JobStatus, arg.JobCompletionDate)
	return err
}

const upsertJob = `-- name: UpsertJob :one
INSERT INTO jobs (
    id, job_type_id, business_unit_id, customer_id, location_id, project_id, job_campaign_id, call_campaign_id, job_status, job_priority, job_summary, job_creation_date, 
    job_schedule_date, job_completion_date, assigned_tech_id, sold_tech_id, sold_bu_id, count_of_estimates, sold_estimate_id, campaign_category_id, invoice_id, opportunity_id,
    is_warranty, warranty_of_job_id, is_recall, recall_of_job_id, is_converted, survey_score, dispatched_by_user_id, booked_by_user_id, job_id_of_created_lead, is_zero_cost,
    scheduled_time, first_dispatch, hold_date, sold_date, start_time, end_time, primary_tech_id, first_response_time
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
    $11, $12, $13, $14, $15, $16, $17, $18,
    $19, $20, $21, $22, $23, $24, $25, $26, $27,
    $28, $29, $30, $31, $32, $33, $34, $35, $36, 
    $37, $38, $39, $40
)
ON CONFLICT (id) DO NOTHING 
RETURNING id, job_type_id, business_unit_id, customer_id, location_id, project_id, job_campaign_id, call_campaign_id, job_status, job_priority, job_summary, job_creation_date, job_schedule_date, job_completion_date, assigned_tech_id, sold_tech_id, sold_bu_id, count_of_estimates, sold_estimate_id, campaign_category_id, invoice_id, opportunity_id, is_warranty, warranty_of_job_id, is_recall, recall_of_job_id, is_converted, survey_score, dispatched_by_user_id, booked_by_user_id, job_id_of_created_lead, is_zero_cost, scheduled_time, first_dispatch, hold_date, sold_date, start_time, end_time, primary_tech_id, first_response_time
`

type UpsertJobParams struct {
	ID                 int32          `json:"id"`
	JobTypeID          int32          `json:"job_type_id"`
	BusinessUnitID     int32          `json:"business_unit_id"`
	CustomerID         int32          `json:"customer_id"`
	LocationID         int32          `json:"location_id"`
	ProjectID          int32          `json:"project_id"`
	JobCampaignID      int32          `json:"job_campaign_id"`
	CallCampaignID     int32          `json:"call_campaign_id"`
	JobStatus          string         `json:"job_status"`
	JobPriority        string         `json:"job_priority"`
	JobSummary         sql.NullString `json:"job_summary"`
	JobCreationDate    time.Time      `json:"job_creation_date"`
	JobScheduleDate    sql.NullTime   `json:"job_schedule_date"`
	JobCompletionDate  sql.NullTime   `json:"job_completion_date"`
	AssignedTechID     uuid.NullUUID  `json:"assigned_tech_id"`
	SoldTechID         uuid.NullUUID  `json:"sold_tech_id"`
	SoldBuID           sql.NullInt32  `json:"sold_bu_id"`
	CountOfEstimates   sql.NullInt32  `json:"count_of_estimates"`
	SoldEstimateID     sql.NullInt32  `json:"sold_estimate_id"`
	CampaignCategoryID sql.NullInt32  `json:"campaign_category_id"`
	InvoiceID          sql.NullInt32  `json:"invoice_id"`
	OpportunityID      sql.NullInt32  `json:"opportunity_id"`
	IsWarranty         sql.NullBool   `json:"is_warranty"`
	WarrantyOfJobID    sql.NullInt32  `json:"warranty_of_job_id"`
	IsRecall           sql.NullBool   `json:"is_recall"`
	RecallOfJobID      sql.NullInt32  `json:"recall_of_job_id"`
	IsConverted        sql.NullBool   `json:"is_converted"`
	SurveyScore        sql.NullInt32  `json:"survey_score"`
	DispatchedByUserID uuid.NullUUID  `json:"dispatched_by_user_id"`
	BookedByUserID     uuid.NullUUID  `json:"booked_by_user_id"`
	JobIDOfCreatedLead sql.NullInt32  `json:"job_id_of_created_lead"`
	IsZeroCost         sql.NullBool   `json:"is_zero_cost"`
	ScheduledTime      sql.NullTime   `json:"scheduled_time"`
	FirstDispatch      sql.NullTime   `json:"first_dispatch"`
	HoldDate           sql.NullTime   `json:"hold_date"`
	SoldDate           sql.NullTime   `json:"sold_date"`
	StartTime          sql.NullTime   `json:"start_time"`
	EndTime            sql.NullTime   `json:"end_time"`
	PrimaryTechID      uuid.NullUUID  `json:"primary_tech_id"`
	FirstResponseTime  sql.NullInt32  `json:"first_response_time"`
}

func (q *Queries) UpsertJob(ctx context.Context, arg UpsertJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, upsertJob,
		arg.ID,
		arg.JobTypeID,
		arg.BusinessUnitID,
		arg.CustomerID,
		arg.LocationID,
		arg.ProjectID,
		arg.JobCampaignID,
		arg.CallCampaignID,
		arg.JobStatus,
		arg.JobPriority,
		arg.JobSummary,
		arg.JobCreationDate,
		arg.JobScheduleDate,
		arg.JobCompletionDate,
		arg.AssignedTechID,
		arg.SoldTechID,
		arg.SoldBuID,
		arg.CountOfEstimates,
		arg.SoldEstimateID,
		arg.CampaignCategoryID,
		arg.InvoiceID,
		arg.OpportunityID,
		arg.IsWarranty,
		arg.WarrantyOfJobID,
		arg.IsRecall,
		arg.RecallOfJobID,
		arg.IsConverted,
		arg.SurveyScore,
		arg.DispatchedByUserID,
		arg.BookedByUserID,
		arg.JobIDOfCreatedLead,
		arg.IsZeroCost,
		arg.ScheduledTime,
		arg.FirstDispatch,
		arg.HoldDate,
		arg.SoldDate,
		arg.StartTime,
		arg.EndTime,
		arg.PrimaryTechID,
		arg.FirstResponseTime,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.JobTypeID,
		&i.BusinessUnitID,
		&i.CustomerID,
		&i.LocationID,
		&i.ProjectID,
		&i.JobCampaignID,
		&i.CallCampaignID,
		&i.JobStatus,
		&i.JobPriority,
		&i.JobSummary,
		&i.JobCreationDate,
		&i.JobScheduleDate,
		&i.JobCompletionDate,
		&i.AssignedTechID,
		&i.SoldTechID,
		&i.SoldBuID,
		&i.CountOfEstimates,
		&i.SoldEstimateID,
		&i.CampaignCategoryID,
		&i.InvoiceID,
		&i.OpportunityID,
		&i.IsWarranty,
		&i.WarrantyOfJobID,
		&i.IsRecall,
		&i.RecallOfJobID,
		&i.IsConverted,
		&i.SurveyScore,
		&i.DispatchedByUserID,
		&i.BookedByUserID,
		&i.JobIDOfCreatedLead,
		&i.IsZeroCost,
		&i.ScheduledTime,
		&i.FirstDispatch,
		&i.HoldDate,
		&i.SoldDate,
		&i.StartTime,
		&i.EndTime,
		&i.PrimaryTechID,
		&i.FirstResponseTime,
	)
	return i, err
}
