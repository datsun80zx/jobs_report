// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: membership.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMembership = `-- name: CreateMembership :one

INSERT INTO membership (customer_id, membership_type, start_date, end_date, status)
VALUES ($1, $2, $3, $4, $5)
RETURNING membership_id, customer_id, membership_type, start_date, end_date, status
`

type CreateMembershipParams struct {
	CustomerID     int32          `json:"customer_id"`
	MembershipType sql.NullString `json:"membership_type"`
	StartDate      time.Time      `json:"start_date"`
	EndDate        sql.NullTime   `json:"end_date"`
	Status         string         `json:"status"`
}

// =====================================================
// MEMBERSHIP QUERIES
// =====================================================
func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, createMembership,
		arg.CustomerID,
		arg.MembershipType,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Membership
	err := row.Scan(
		&i.MembershipID,
		&i.CustomerID,
		&i.MembershipType,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}

const getActiveMembershipByCustomerID = `-- name: GetActiveMembershipByCustomerID :one
SELECT membership_id, customer_id, membership_type, start_date, end_date, status FROM membership 
WHERE customer_id = $1 AND status = 'Active'
ORDER BY start_date DESC
LIMIT 1
`

func (q *Queries) GetActiveMembershipByCustomerID(ctx context.Context, customerID int32) (Membership, error) {
	row := q.db.QueryRowContext(ctx, getActiveMembershipByCustomerID, customerID)
	var i Membership
	err := row.Scan(
		&i.MembershipID,
		&i.CustomerID,
		&i.MembershipType,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}

const getMembershipByID = `-- name: GetMembershipByID :one
SELECT membership_id, customer_id, membership_type, start_date, end_date, status FROM membership WHERE membership_id = $1
`

func (q *Queries) GetMembershipByID(ctx context.Context, membershipID int32) (Membership, error) {
	row := q.db.QueryRowContext(ctx, getMembershipByID, membershipID)
	var i Membership
	err := row.Scan(
		&i.MembershipID,
		&i.CustomerID,
		&i.MembershipType,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}

const getMembershipsByCustomerID = `-- name: GetMembershipsByCustomerID :many
SELECT membership_id, customer_id, membership_type, start_date, end_date, status FROM membership WHERE customer_id = $1 ORDER BY start_date DESC
`

func (q *Queries) GetMembershipsByCustomerID(ctx context.Context, customerID int32) ([]Membership, error) {
	rows, err := q.db.QueryContext(ctx, getMembershipsByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.MembershipID,
			&i.CustomerID,
			&i.MembershipType,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembershipStatus = `-- name: UpdateMembershipStatus :exec
UPDATE membership 
SET status = $2, end_date = $3
WHERE membership_id = $1
`

type UpdateMembershipStatusParams struct {
	MembershipID int32        `json:"membership_id"`
	Status       string       `json:"status"`
	EndDate      sql.NullTime `json:"end_date"`
}

func (q *Queries) UpdateMembershipStatus(ctx context.Context, arg UpdateMembershipStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateMembershipStatus, arg.MembershipID, arg.Status, arg.EndDate)
	return err
}
