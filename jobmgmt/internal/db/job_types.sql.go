// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: job_types.sql

package db

import (
	"context"
	"database/sql"
)

const createJobType = `-- name: CreateJobType :one
INSERT INTO job_types (id, name, description, business_unit_id, skills_id, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    NOW(),
    NOW()
)
RETURNING id, name, description, business_unit_id, skills_id, created_at, updated_at
`

type CreateJobTypeParams struct {
	ID             int32          `json:"id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	BusinessUnitID sql.NullInt32  `json:"business_unit_id"`
	SkillsID       sql.NullInt32  `json:"skills_id"`
}

func (q *Queries) CreateJobType(ctx context.Context, arg CreateJobTypeParams) (JobType, error) {
	row := q.db.QueryRowContext(ctx, createJobType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.BusinessUnitID,
		arg.SkillsID,
	)
	var i JobType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.BusinessUnitID,
		&i.SkillsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOneJobType = `-- name: GetOneJobType :one
SELECT id, name, description, business_unit_id, skills_id, created_at, updated_at FROM job_types
WHERE job_types.id = $1
`

func (q *Queries) GetOneJobType(ctx context.Context, id int32) (JobType, error) {
	row := q.db.QueryRowContext(ctx, getOneJobType, id)
	var i JobType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.BusinessUnitID,
		&i.SkillsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listJobTypesByBusinessUnit = `-- name: ListJobTypesByBusinessUnit :many
SELECT id, name, description, business_unit_id, skills_id, created_at, updated_at FROM job_types
WHERE job_types.business_unit_id = $1
ORDER BY name
`

func (q *Queries) ListJobTypesByBusinessUnit(ctx context.Context, businessUnitID sql.NullInt32) ([]JobType, error) {
	rows, err := q.db.QueryContext(ctx, listJobTypesByBusinessUnit, businessUnitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobType
	for rows.Next() {
		var i JobType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.BusinessUnitID,
			&i.SkillsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobTypesByJobSkills = `-- name: ListJobTypesByJobSkills :many
SELECT id, name, description, business_unit_id, skills_id, created_at, updated_at FROM job_types
WHERE job_types.skills_id = $1
ORDER BY business_unit_id
`

func (q *Queries) ListJobTypesByJobSkills(ctx context.Context, skillsID sql.NullInt32) ([]JobType, error) {
	rows, err := q.db.QueryContext(ctx, listJobTypesByJobSkills, skillsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobType
	for rows.Next() {
		var i JobType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.BusinessUnitID,
			&i.SkillsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
