// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: business_unit.sql

package db

import (
	"context"
	"database/sql"
)

const createBusinessUnit = `-- name: CreateBusinessUnit :one
INSERT INTO business_units (id, name, description, created_at, updated_at)
VALUES (
    $1, 
    $2,
    $3,
    NOW(),
    NOW()
)
RETURNING id, name, description, created_at, updated_at
`

type CreateBusinessUnitParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateBusinessUnit(ctx context.Context, arg CreateBusinessUnitParams) (BusinessUnit, error) {
	row := q.db.QueryRowContext(ctx, createBusinessUnit, arg.ID, arg.Name, arg.Description)
	var i BusinessUnit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBusinessUnitByID = `-- name: GetBusinessUnitByID :one
SELECT id, name, description, created_at, updated_at FROM business_units 
WHERE id = $1
`

func (q *Queries) GetBusinessUnitByID(ctx context.Context, id int32) (BusinessUnit, error) {
	row := q.db.QueryRowContext(ctx, getBusinessUnitByID, id)
	var i BusinessUnit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBusinessUnitByName = `-- name: GetBusinessUnitByName :one
SELECT id, name, description, created_at, updated_at FROM business_units 
WHERE name = $1
`

func (q *Queries) GetBusinessUnitByName(ctx context.Context, name string) (BusinessUnit, error) {
	row := q.db.QueryRowContext(ctx, getBusinessUnitByName, name)
	var i BusinessUnit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBusinessUnits = `-- name: ListBusinessUnits :many
SELECT id, name, description, created_at, updated_at FROM business_units 
ORDER BY name
`

func (q *Queries) ListBusinessUnits(ctx context.Context) ([]BusinessUnit, error) {
	rows, err := q.db.QueryContext(ctx, listBusinessUnits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BusinessUnit
	for rows.Next() {
		var i BusinessUnit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertBusinessUnit = `-- name: UpsertBusinessUnit :one
INSERT INTO business_units (id, name, description, created_at, updated_at)
VALUES (
    $1, 
    $2,
    $3,
    NOW(),
    NOW()
)
ON CONFLICT (id) DO NOTHING
RETURNING id, name, description, created_at, updated_at
`

type UpsertBusinessUnitParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpsertBusinessUnit(ctx context.Context, arg UpsertBusinessUnitParams) (BusinessUnit, error) {
	row := q.db.QueryRowContext(ctx, upsertBusinessUnit, arg.ID, arg.Name, arg.Description)
	var i BusinessUnit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
