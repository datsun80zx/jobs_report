// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: business_unit.sql

package db

import (
	"context"
)

const createBusinessUnit = `-- name: CreateBusinessUnit :one

INSERT INTO business_unit (business_unit_name)
VALUES ($1)
RETURNING business_unit_id, business_unit_name
`

// =====================================================
// BUSINESS UNIT QUERIES
// =====================================================
func (q *Queries) CreateBusinessUnit(ctx context.Context, businessUnitName string) (BusinessUnit, error) {
	row := q.db.QueryRowContext(ctx, createBusinessUnit, businessUnitName)
	var i BusinessUnit
	err := row.Scan(&i.BusinessUnitID, &i.BusinessUnitName)
	return i, err
}

const getBusinessUnitByID = `-- name: GetBusinessUnitByID :one
SELECT business_unit_id, business_unit_name FROM business_unit WHERE business_unit_id = $1
`

func (q *Queries) GetBusinessUnitByID(ctx context.Context, businessUnitID int32) (BusinessUnit, error) {
	row := q.db.QueryRowContext(ctx, getBusinessUnitByID, businessUnitID)
	var i BusinessUnit
	err := row.Scan(&i.BusinessUnitID, &i.BusinessUnitName)
	return i, err
}

const getBusinessUnitByName = `-- name: GetBusinessUnitByName :one
SELECT business_unit_id, business_unit_name FROM business_unit WHERE business_unit_name = $1
`

func (q *Queries) GetBusinessUnitByName(ctx context.Context, businessUnitName string) (BusinessUnit, error) {
	row := q.db.QueryRowContext(ctx, getBusinessUnitByName, businessUnitName)
	var i BusinessUnit
	err := row.Scan(&i.BusinessUnitID, &i.BusinessUnitName)
	return i, err
}

const listBusinessUnits = `-- name: ListBusinessUnits :many
SELECT business_unit_id, business_unit_name FROM business_unit ORDER BY business_unit_name
`

func (q *Queries) ListBusinessUnits(ctx context.Context) ([]BusinessUnit, error) {
	rows, err := q.db.QueryContext(ctx, listBusinessUnits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BusinessUnit
	for rows.Next() {
		var i BusinessUnit
		if err := rows.Scan(&i.BusinessUnitID, &i.BusinessUnitName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertBusinessUnit = `-- name: UpsertBusinessUnit :one
INSERT INTO business_unit (business_unit_name)
VALUES ($1)
ON CONFLICT (business_unit_name) DO NOTHING
RETURNING business_unit_id, business_unit_name
`

func (q *Queries) UpsertBusinessUnit(ctx context.Context, businessUnitName string) (BusinessUnit, error) {
	row := q.db.QueryRowContext(ctx, upsertBusinessUnit, businessUnitName)
	var i BusinessUnit
	err := row.Scan(&i.BusinessUnitID, &i.BusinessUnitName)
	return i, err
}
