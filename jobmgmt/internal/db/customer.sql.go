// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (id, name, city, state, zip, customer_type,created_at, updated_at)
VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6,
    NOW(),
    NOW()
)
RETURNING id, name, city, state, zip, customer_type, created_at, updated_at
`

type CreateCustomerParams struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	City         sql.NullString `json:"city"`
	State        sql.NullString `json:"state"`
	Zip          sql.NullString `json:"zip"`
	CustomerType sql.NullString `json:"customer_type"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.ID,
		arg.Name,
		arg.City,
		arg.State,
		arg.Zip,
		arg.CustomerType,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.State,
		&i.Zip,
		&i.CustomerType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, name, city, state, zip, customer_type, created_at, updated_at FROM customers 
WHERE id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.State,
		&i.Zip,
		&i.CustomerType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name, city, state, zip, customer_type, created_at, updated_at FROM customers ORDER BY name LIMIT $1 OFFSET $2
`

type ListCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.City,
			&i.State,
			&i.Zip,
			&i.CustomerType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCustomersByName = `-- name: SearchCustomersByName :many
SELECT id, name, city, state, zip, customer_type, created_at, updated_at FROM customers
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name
LIMIT $2
`

type SearchCustomersByNameParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
}

func (q *Queries) SearchCustomersByName(ctx context.Context, arg SearchCustomersByNameParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, searchCustomersByName, arg.Column1, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.City,
			&i.State,
			&i.Zip,
			&i.CustomerType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCustomer = `-- name: UpsertCustomer :one
INSERT INTO customers (id, name, city, state, zip, customer_type,created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW(),NOW())
ON CONFLICT (id) DO NOTHING
RETURNING id, name, city, state, zip, customer_type, created_at, updated_at
`

type UpsertCustomerParams struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	City         sql.NullString `json:"city"`
	State        sql.NullString `json:"state"`
	Zip          sql.NullString `json:"zip"`
	CustomerType sql.NullString `json:"customer_type"`
}

func (q *Queries) UpsertCustomer(ctx context.Context, arg UpsertCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, upsertCustomer,
		arg.ID,
		arg.Name,
		arg.City,
		arg.State,
		arg.Zip,
		arg.CustomerType,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.State,
		&i.Zip,
		&i.CustomerType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
