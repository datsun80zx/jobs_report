// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: technician.sql

package db

import (
	"context"
	"database/sql"
)

const createTechnician = `-- name: CreateTechnician :one

INSERT INTO technician (technician_name, business_unit_id, email)
VALUES ($1, $2, $3)
RETURNING technician_id, technician_name, business_unit_id, email, created_at
`

type CreateTechnicianParams struct {
	TechnicianName string         `json:"technician_name"`
	BusinessUnitID sql.NullInt32  `json:"business_unit_id"`
	Email          sql.NullString `json:"email"`
}

// =====================================================
// TECHNICIAN QUERIES
// =====================================================
func (q *Queries) CreateTechnician(ctx context.Context, arg CreateTechnicianParams) (Technician, error) {
	row := q.db.QueryRowContext(ctx, createTechnician, arg.TechnicianName, arg.BusinessUnitID, arg.Email)
	var i Technician
	err := row.Scan(
		&i.TechnicianID,
		&i.TechnicianName,
		&i.BusinessUnitID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getTechnicianByID = `-- name: GetTechnicianByID :one
SELECT technician_id, technician_name, business_unit_id, email, created_at FROM technician WHERE technician_id = $1
`

func (q *Queries) GetTechnicianByID(ctx context.Context, technicianID int32) (Technician, error) {
	row := q.db.QueryRowContext(ctx, getTechnicianByID, technicianID)
	var i Technician
	err := row.Scan(
		&i.TechnicianID,
		&i.TechnicianName,
		&i.BusinessUnitID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getTechnicianByName = `-- name: GetTechnicianByName :one
SELECT technician_id, technician_name, business_unit_id, email, created_at FROM technician WHERE technician_name = $1
`

func (q *Queries) GetTechnicianByName(ctx context.Context, technicianName string) (Technician, error) {
	row := q.db.QueryRowContext(ctx, getTechnicianByName, technicianName)
	var i Technician
	err := row.Scan(
		&i.TechnicianID,
		&i.TechnicianName,
		&i.BusinessUnitID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listTechnicians = `-- name: ListTechnicians :many
SELECT technician_id, technician_name, business_unit_id, email, created_at FROM technician ORDER BY technician_name
`

func (q *Queries) ListTechnicians(ctx context.Context) ([]Technician, error) {
	rows, err := q.db.QueryContext(ctx, listTechnicians)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Technician
	for rows.Next() {
		var i Technician
		if err := rows.Scan(
			&i.TechnicianID,
			&i.TechnicianName,
			&i.BusinessUnitID,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertTechnician = `-- name: UpsertTechnician :one
INSERT INTO technician (technician_name, business_unit_id, email)
VALUES ($1, $2, $3)
ON CONFLICT DO NOTHING
RETURNING technician_id, technician_name, business_unit_id, email, created_at
`

type UpsertTechnicianParams struct {
	TechnicianName string         `json:"technician_name"`
	BusinessUnitID sql.NullInt32  `json:"business_unit_id"`
	Email          sql.NullString `json:"email"`
}

func (q *Queries) UpsertTechnician(ctx context.Context, arg UpsertTechnicianParams) (Technician, error) {
	row := q.db.QueryRowContext(ctx, upsertTechnician, arg.TechnicianName, arg.BusinessUnitID, arg.Email)
	var i Technician
	err := row.Scan(
		&i.TechnicianID,
		&i.TechnicianName,
		&i.BusinessUnitID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
