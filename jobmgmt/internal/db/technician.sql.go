// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: technician.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTechnician = `-- name: CreateTechnician :one
INSERT INTO technicians (id, name, email, phone_number, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW()
)
RETURNING id, name, email, phone_number, created_at, updated_at
`

type CreateTechnicianParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Email       string         `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

func (q *Queries) CreateTechnician(ctx context.Context, arg CreateTechnicianParams) (Technician, error) {
	row := q.db.QueryRowContext(ctx, createTechnician,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
	)
	var i Technician
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTechnicianByID = `-- name: GetTechnicianByID :one
SELECT id, name, email, phone_number, created_at, updated_at FROM technicians WHERE technicians.id = $1
`

func (q *Queries) GetTechnicianByID(ctx context.Context, id uuid.UUID) (Technician, error) {
	row := q.db.QueryRowContext(ctx, getTechnicianByID, id)
	var i Technician
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTechnicianByName = `-- name: GetTechnicianByName :one
SELECT id, name, email, phone_number, created_at, updated_at FROM technicians WHERE technicians.name = $1
`

func (q *Queries) GetTechnicianByName(ctx context.Context, name string) (Technician, error) {
	row := q.db.QueryRowContext(ctx, getTechnicianByName, name)
	var i Technician
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTechnicians = `-- name: ListTechnicians :many
SELECT id, name, email, phone_number, created_at, updated_at FROM technicians ORDER BY name
`

func (q *Queries) ListTechnicians(ctx context.Context) ([]Technician, error) {
	rows, err := q.db.QueryContext(ctx, listTechnicians)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Technician
	for rows.Next() {
		var i Technician
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertTechnician = `-- name: UpsertTechnician :one
INSERT INTO technicians (id, name, email, phone_number, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOw())
ON CONFLICT (id) DO NOTHING
RETURNING id, name, email, phone_number, created_at, updated_at
`

type UpsertTechnicianParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Email       string         `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

func (q *Queries) UpsertTechnician(ctx context.Context, arg UpsertTechnicianParams) (Technician, error) {
	row := q.db.QueryRowContext(ctx, upsertTechnician,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
	)
	var i Technician
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
