// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: call_campaigns.sql

package db

import (
	"context"
	"database/sql"
)

const createCallCampaign = `-- name: CreateCallCampaign :one
INSERT INTO call_campaigns (id, name, description, created_at, updated_at)
VALUES (
    $1, 
    $2,
    $3,
    NOW(),
    NOW()
)
RETURNING id, name, description, created_at, updated_at
`

type CreateCallCampaignParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateCallCampaign(ctx context.Context, arg CreateCallCampaignParams) (CallCampaign, error) {
	row := q.db.QueryRowContext(ctx, createCallCampaign, arg.ID, arg.Name, arg.Description)
	var i CallCampaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOneCallCampaign = `-- name: GetOneCallCampaign :one
SELECT id, name, description, created_at, updated_at FROM call_campaigns
WHERE id = $1
`

func (q *Queries) GetOneCallCampaign(ctx context.Context, id int32) (CallCampaign, error) {
	row := q.db.QueryRowContext(ctx, getOneCallCampaign, id)
	var i CallCampaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCallCampaigns = `-- name: ListCallCampaigns :many
SELECT id, name, description, created_at, updated_at FROM call_campaigns
ORDER BY name
`

func (q *Queries) ListCallCampaigns(ctx context.Context) ([]CallCampaign, error) {
	rows, err := q.db.QueryContext(ctx, listCallCampaigns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CallCampaign
	for rows.Next() {
		var i CallCampaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
