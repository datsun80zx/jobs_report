// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: survey.sql

package db

import (
	"context"
	"database/sql"
)

const createSurvey = `-- name: CreateSurvey :one

INSERT INTO survey (job_id, survey_score, survey_date, comments)
VALUES ($1, $2, $3, $4)
RETURNING survey_id, job_id, survey_score, survey_date, comments
`

type CreateSurveyParams struct {
	JobID       int32          `json:"job_id"`
	SurveyScore sql.NullString `json:"survey_score"`
	SurveyDate  sql.NullTime   `json:"survey_date"`
	Comments    sql.NullString `json:"comments"`
}

// =====================================================
// SURVEY QUERIES
// =====================================================
func (q *Queries) CreateSurvey(ctx context.Context, arg CreateSurveyParams) (Survey, error) {
	row := q.db.QueryRowContext(ctx, createSurvey,
		arg.JobID,
		arg.SurveyScore,
		arg.SurveyDate,
		arg.Comments,
	)
	var i Survey
	err := row.Scan(
		&i.SurveyID,
		&i.JobID,
		&i.SurveyScore,
		&i.SurveyDate,
		&i.Comments,
	)
	return i, err
}

const getSurveyByJobID = `-- name: GetSurveyByJobID :one
SELECT survey_id, job_id, survey_score, survey_date, comments FROM survey WHERE job_id = $1
`

func (q *Queries) GetSurveyByJobID(ctx context.Context, jobID int32) (Survey, error) {
	row := q.db.QueryRowContext(ctx, getSurveyByJobID, jobID)
	var i Survey
	err := row.Scan(
		&i.SurveyID,
		&i.JobID,
		&i.SurveyScore,
		&i.SurveyDate,
		&i.Comments,
	)
	return i, err
}

const upsertSurvey = `-- name: UpsertSurvey :one
INSERT INTO survey (job_id, survey_score, survey_date, comments)
VALUES ($1, $2, $3, $4)
ON CONFLICT (job_id)
DO UPDATE SET
    survey_score = EXCLUDED.survey_score,
    survey_date = EXCLUDED.survey_date,
    comments = EXCLUDED.comments
RETURNING survey_id, job_id, survey_score, survey_date, comments
`

type UpsertSurveyParams struct {
	JobID       int32          `json:"job_id"`
	SurveyScore sql.NullString `json:"survey_score"`
	SurveyDate  sql.NullTime   `json:"survey_date"`
	Comments    sql.NullString `json:"comments"`
}

func (q *Queries) UpsertSurvey(ctx context.Context, arg UpsertSurveyParams) (Survey, error) {
	row := q.db.QueryRowContext(ctx, upsertSurvey,
		arg.JobID,
		arg.SurveyScore,
		arg.SurveyDate,
		arg.Comments,
	)
	var i Survey
	err := row.Scan(
		&i.SurveyID,
		&i.JobID,
		&i.SurveyScore,
		&i.SurveyDate,
		&i.Comments,
	)
	return i, err
}
